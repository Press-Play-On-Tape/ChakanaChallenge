#pragma once
#include "../../fxdata/fxdata.h"
#include "../../fxdata/images/Images.h"

#define DEBUG_PRINT    Serial.print
#define DEBUG_PRINTLN  Serial.println
#define DEBUG_BREAK    asm volatile("break\n");

#define _DEBUG
#define _DEBUG_STACK
#define DEBUG_SOUND
#define _DEBUG_ORIGBOAT

enum Tiles : uint8_t {

    Blank = 0,
    Solid_Walkable = 1,
    Solid_NonWalkable = 2,

    // --------------------------------------------------------------------------------------------
    /* Basic Shapes

    01, 01, 
    02, 02, 

    ********   ********   
    ********   ********   
    ********   ********   
    ********   ********  

    ********   ********   
    ********   ********   
    ********   ********   
    ********   ********      


    01, 00, 
    02, 00, 
    
    ********   ........   
    ********   ........   
    ********   ........   
    ********   ........  

    ********   ........   
    ********   ........   
    ********   ........   
    ********   ........      


    00, 01, 
    00, 02, 

    ........   ********   
    ........   ********   
    ........   ********   
    ........   ********  

    ........   ********   
    ........   ********   
    ........   ********   
    ........   ********      

    00, 00, 
    01, 01, 

    ........   ........ 
    ........   ........ 
    ........   ........ 
    ........   ........

    ********   ********   
    ********   ********   
    ********   ********   
    ********   ********      


    // --------------------------------------------------------------------------------------------
    /* Single Stair RH Upper

    04, 05, 
    02, 01, 

    ........   ...*****   
    ........   ...*****   
    ......**   ********   
    ......**   ********   

    ********   ********   
    ********   ********   
    ********   ********   
    ********   ********   

    */
    Single_Stair_RH_Upper_TL = 4,
    Single_Stair_RH_Upper_TR = 5,

    /* Single Stair RH Lower

    00, 00, 
    00, 06, 

    ........   ........ 
    ........   ........ 
    ........   ........ 
    ........   ........ 

    ........   ....****
    ........   ....****
    ........   ********
    ........   ********

    */
    Single_Stair_RH_Lower = 6,

    /* Single Stair LH Upper

    09, 10, 
    02, 01, 

    *****...   ........   
    *****...   ........   
    ********   **......   
    ********   **......   

    ********   ********   
    ********   ********   
    ********   ********   
    ********   ********   

    */
    Single_Stair_LH_Upper_TL = 9,
    Single_Stair_LH_Upper_TR = 10,

    /* Single Stair LH Lower

    00, 00, 
    11, 00, 

    ........   ........ 
    ........   ........ 
    ........   ........ 
    ........   ........ 

    ****....   ........   
    ****....   ........   
    ********   ........   
    ********   ........   

    */
    Single_Stair_LH_Lower = 11,


    // --------------------------------------------------------------------------------------------
    /* Ladders

    7 is steps lower.
    8 is steps upper.
    12 is steps middle    
    
    Ladder Single Level

    08, 08,
    07, 07,
   
    Ladder Two Level

    08, 08,
    12, 12,
    12, 12,
    07, 07,
   
    Ladder Three Level

    08, 08,
    12, 12,
    12, 12,
    12, 12,
    12, 12,
    07, 07,

    */

    Ladder_Lower = 7,
    Ladder_Upper = 8,
    Ladder_Middle = 12,


    // --------------------------------------------------------------------------------------------
    /* Vines

    31 is vine middle.
    32 is vine bottom.
    33 is steps top    
       
    Vine Two Level

    33, 33,
    31, 31,
    31, 31,
    32, 32,
   
    Vine Three Level

    33, 33,
    31, 31,
    31, 31,
    31, 31,
    31, 31,
    32, 32,

    */

    Vine_Lower = 32,
    Vine_Upper = 33,
    Vine_Middle = 31,


    /* Swinging Vine
    
    
    Typical:

    00, 00,   00, 00,   00, 00,   00, 00,   00, 00, 
    00, 00,   29, 00,   00, 00,   00, 00,   30, 00,
    
    01, 01,   00, 00,   00, 00,   00, 00,   01, 01,
    02, 02,   00, 00,   00, 00,   00, 00,   02, 02, 

    No image, place ItemType::Swinging_Vine in same location.
    */

    Swinging_Vine_LH = 29,
    Swinging_Vine_RH = 30,



    // --------------------------------------------------------------------------------------------
    /* Ropes

    13 is rope support LH.
    14 is rope support RH.
    15 is rope.
    
    16 Spring LH
    17 Spring LH


    Typical Layout

    13, 15,    15, 15,    15, 14,
    13, 00,    00, 00,    00, 14, 

    */

    Rope_Support_LH = 13,
    Rope_Support_RH = 14,
    Rope = 15,

    /* Spring LH
    
    16, 00, 
    01, 01, 

    */
    Spring_LH = 16,


    /* Spring LH
    
    00, 17, 
    01, 01, 

    */
    Spring_RH = 17,


    // --------------------------------------------------------------------------------------------
    /*  Slide LH Upper

    19, 00,
    02, 00, 
    
    **         ........
    ****       ........
    ******     ........
    ********   ........

    ********   ........
    ********   ........
    ********   ........
    ********   ........

    OR

    01, 19,
    02, 02,
    
    ********   **     
    ********   ****    
    ********   ******    
    ********   ********  

    ********   ********   
    ********   ********   
    ********   ********   
    ********   ********   


    */
    Slide_LH_Upper = 19,

    /* Slide LH Full

    20, 00,
    02, 20, 
    
    **         ........
    ****       ........
    ******     ........
    ********   ........

    ********   ........
    ********   **......
    ********   ****....
    ********   ******..
    
    */
    Slide_LH_Full = 20,

    /* Slide RH Upper

    00, 21,
    00, 02, 
    
    ........         **
    ........       ****
    ........     ******
    ........   ********   

    ........   ********
    ........   ********
    ........   ********
    ........   ********

    OR

    21, 01,
    02, 02,
    
          **   ********
        ****   ********
      ******   ********
    ********   ********   

    ********   ********
    ********   ********
    ********   ********
    ********   ******** 


    */
    Slide_RH_Upper = 21,

    /* Slide RH Full

    00, 22,
    22, 02, 
    
    ........         **
    ........       ****
    ........     ******
    ........   ********  

    ......**   ********
    ....****   ********
    ..******   ********
    ********   ******** 
    
    */
    Slide_RH_Full = 22,


    // --------------------------------------------------------------------------------------------

    /* Spikes

    00, 00,
    03, 03, 
    
    ........   ........
    ........   ........
    ........   ........
    ........   ........

    ..*....*   ...*....
    ..*....*   ...*....
    .***..**   *.***...
    ********   ********

    OR

    03, 03, 
    02, 02, 

    ..*....*   ...*....
    ..*....*   ...*....
    .***..**   *.***...
    ********   ********

    ********   ********
    ********   ********
    ********   ********
    ********   ******** 
    
    */
    Spikes = 3,

    /* Lever Portal
    
    34, 35,
    34, 35,

    No image, place ItemType::Lever_Portal_Closed or ItemType::Lever_Portal_Open in same location.

    */
    Lever_Portal_LH = 34,
    Lever_Portal_RH = 35,


    /* Lever Portal Auto Close
    
    36, 37,
    36, 37,

    No image, place ItemType::Lever_Portal_Auto_Closed or ItemType::Lever_Portal_Auto_Open in same location.

    */
    Lever_Portal_Auto_LH = 36,
    Lever_Portal_Auto_RH = 37,


    /* Punji Pit
    
    00, 00, 
    23, 23,

    No image, place ItemType::Punji in same location.

    */
    Punji = 23,

    
    /* Wooden Barrier

    24, 24, 
    24, 24,

    No image, place ItemType::WoodenBarrier in same location.

    */
   WoddenBarrier = 24,


    /* Water

    38 Plain Water
    39 Bubbling Water 1
    40 Bubbling Water 1

    39, 39,   38, 38,   40, 40, 
    39, 39,   38, 38,   40, 40,

    */
   Water_Plain = 38,
   Water_Bubbling_1 = 39,
   Water_Bubbling_2 = 40,

};

// 3 spikes



// 6 is LH side of stairs on ground.

// 16 Spring LH
// 17 Spring LH
// 18 Like 01 but you cannot walk past it.


// 23 Punji
//    Do 0,  0
//      23, 23



// 25 Mystery Crate
//    Do 25, 25
//       25, 25

// 26 Locked Door
//    Do 26, 26
//       26, 26

// 27 Rollers Left
//    Do 0, 0
//       27, 27


// 28 Rollers Right
//    Do 0, 0
//       28, 28

// 29 Rope Left
//    Do  0, 0, 0, 0, 0, 0
//       29, 0, 0, 0, 0, 30

// 30 Rope Left
//    Do  0, 0, 0, 0, 0, 0
//       29, 0, 0, 0, 0, 30

// uint8_t mapData[Map_Y_Count][Map_X_Count] = {
// //0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1
// { 0, 0, 0, 0, 0, 0,24,24, 0, 0, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 3, 3, 0, 0, 2, 2, 2, 2, 1, 1,18,18, },
// { 0, 0, 0, 0, 0, 0,24,24, 0, 0, 1, 1, 9,10,16, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 9,10, 0, 0,18,18, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 2, 2,13, 0, 0, 0, 0, 0, 0,14, 0, 0, 0, 0, 0, 0, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 1, 1,13,15,15,15,15,15,15,14, 0, 0, 0, 0, 0, 0, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15,15,15,15,15,14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, 
// };




// uint8_t mapData[Map_Y_Count][Map_X_Count] = {  // Rope 
// //0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0,13, 0, 0, 0, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,13,15,15,15, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,36,37,34,35, 0, 0, 0, 0, 0, 0, 0, 0, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,36,37,34,35, 0, 0, 0, 0, 8, 8, 0, 0, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, 
// };


// uint8_t mapData[Map_Y_Count][Map_X_Count] = {  // Rope 
// //0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1
// { 0, 0, 2, 2, 2, 2, 2, 2,40,40,38,38,39,39, 2, 2, 2, 2, 3, 3, 0, 0, 3, 3, 2, 2, 0, 0,13, 0, 0, 0, }, 
// { 0, 0, 4, 5, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 9,10, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,13,15,15,15, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,29, 0, 0, 0, 0,30, 0, 0, 0, 0, 0, 0, 0, 0, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, 
// };



// uint8_t mapData[Map_Y_Count][Map_X_Count] = {  // Rope 
// //0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2,40,40,38,38,39,39, 2, 2, 2, 2, 3, 3, 0, 0, 3, 3,  }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 9,10, 0, 0, 0, 0, 0, 0,  }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,29, 0, 0, 0, 0,30,  }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }, 
// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }, 
// };


namespace Music {

    constexpr uint24_t Songs[] = { Music::Song_MainTheme };

    constexpr uint24_t SFXs[] =  { Music::SFX_Death, 
                                   Music::SFX_Victory,
                                   Music::SFX_XPGain,
                                   Music::SFX_Three_Inc,
                                   Music::SFX_Three_Dec,
                                   Music::SFX_PlayerBlip,
                                   Music::SFX_EnemyBlip,
                                   Music::SFX_Explosion,
                                   Music::SFX_DoubleBeep,
                                   Music::SFX_DoubleBeepDown,
                                   Music::SFX_Bet1,
                                   Music::SFX_Bet2,
                                   Music::SFX_Bet3,
                                   Music::SFX_Bet4,
                                   Music::SFX_Bet5,
                                   Music::SFX_Bet6,
                                   Music::SFX_Click,
                                   Music::SFX_SmallBlind,
                                   Music::SFX_BigBlind,
                                };

}

namespace Constants {

    constexpr uint8_t Map_X_Count = 40;
    constexpr uint8_t Map_Y_Count = 16;


    constexpr uint8_t swordLunge_Player[] = { 
    2, // stationary 
    3, 3, 5, 3, 3, 2, // lunge
    2, 2, 2, 2, // walk
    2, 2, 2, 2, // walk Back
    2, 2, 2, 2, 2, 2, 2, // jump
    };
    constexpr uint8_t SwordLunge_Enemy[] = { 
    2, // stationary 
    3, 4, 6, 4, 3, 2, // lunge
    2, 2, 2, 2, // walk
    2, 2, 2, 2, // walk Back
    2, 2, 2, 2, 2, 2, 2, // jump
    };

    const uint8_t PROGMEM ball_X[20] = { 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 };
    const uint8_t PROGMEM ball_Y[20] = { 0, -8, -6, -5,         -4,  -3,  -2, -1, 0, 0, 0, 0,    0,  0, 1,   2,  3, 4, 4, 5 };

    constexpr int8_t swingyThing_X[] = { 0, -2, -4, -5, -6, -5, -4, -2, 0, 2, 4, 5, 6, 5, 4, 2 };
    constexpr int8_t swingyThing_Y[] = { 0, -1, -2, -3, -4, -3, -2, -1, 
                                         0, -1, -2, -3, -4, -3, -2, -1 };

    constexpr uint24_t PalmImages[] = { Images::Palm1, Images::Palm2, Images::Palm3, Images::Palm4, Images::Palm5, Images::Palm6, Images::Palm5, Images::Palm6 };

    constexpr uint8_t FlipTime = 25;
    constexpr uint8_t WinFlashTime_Start = 120;
    constexpr uint16_t WinFlashTime_End = 800;
    constexpr uint8_t NoPlayer = 255;
    constexpr uint8_t NoItem = 255;
    constexpr uint8_t NoDirection = 255;
    constexpr uint8_t NoEnemy = 255;
    constexpr uint8_t PlayerCount = 6;
    constexpr uint8_t HealthMax = 14;

    constexpr uint8_t Speed_Action_Fast = 8;
    constexpr uint8_t Speed_Action_Slow = 24;
    constexpr uint8_t Speed_Fold = 6;

    constexpr uint8_t Bet_Default = 50;
    constexpr uint8_t Bet_Increment = Bet_Default / 2;

    constexpr uint8_t EnemyCount = 3;

    constexpr uint8_t StackSize = 30;
    constexpr uint8_t Animation_NumberOfFrames = 15;
    constexpr uint16_t NoWaves = 29999;

    constexpr uint8_t GroundY = 37;
    constexpr uint8_t ItemCount = 10;
    constexpr uint8_t Puff_Max = 7 * 16;
    constexpr uint8_t Glint_Max = 8;





    constexpr int8_t BoatMovements[] = {

        0, 2,   6, 30,  7, 5,   8, 20,  7, 2, 6, 2, 5, 2, 4, 28,   5, 2, 6, 2, 7, 2, 8, 16,  9, 2, 10, 2, 11, 2, 12, 8,  255,

        0, 1,   4, 118,   5, 4,   6, 4, 255,

    };

};



uint8_t mapData[Constants::Map_Y_Count][Constants::Map_X_Count];